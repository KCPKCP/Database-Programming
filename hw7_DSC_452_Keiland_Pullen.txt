

REM Q1.)

CREATE TABLE EMP_log
(
    updated_date    DATE default SYSDATE,
    updated_by      varchar2(15) default USER,
    action          varchar2(30)
)

CREATE OR REPLACE TRIGGER empl_delete
    AFTER DELETE on employees
    BEGIN
        INSERT INTO EMP_log (updated_date, updated_by, action)
        VALUES (SYSDATE, USER, 'Something Deleted');
    END empl_delete;
    
DELETE employees where employee_id = 105;

SELECT * FROM EMP_log;

ROLLBACK;

[output]

Table EMP_LOG created.


Trigger EMPL_DELETE compiled


1 row deleted.


UPDATED_D UPDATED_BY      ACTION                        
--------- --------------- ------------------------------
01-JUN-22 KPULLEN2        Something Deleted             


Rollback complete.





REM Q2.)

DROP table Empl_Del_log;

CREATE TABLE Empl_Del_log
(
    old_empno       number (6),
    old_fname       varchar2(20),
    old_lname       varchar2(25),
    old_sal         number(8,2),
    old_mgrno       number(6),
    updated_date    date,
    updated_by      varchar2(15),
    action          varchar2(30)
);

CREATE OR REPLACE TRIGGER Empl_Del_row
    AFTER DELETE ON employees
      FOR EACH ROW
    BEGIN 
        INSERT INTO Empl_Del_log 
        VALUES (:OLD.employee_id, :old.first_name, :old.last_name, :old.salary, :old.manager_id, SYSDATE, USER, 'Deleted Employee Info');
    END Empl_Del_Row;
    /
    
DELETE EMPLOYEES where manager_id = 103;

SELECT * FROM Empl_Del_log;

ROLLBACK;

[output]

Table EMPL_DEL_LOG created.


Trigger EMPL_DEL_ROW compiled


4 rows deleted.


 OLD_EMPNO OLD_FNAME            OLD_LNAME                    OLD_SAL  OLD_MGRNO UPDATED_D UPDATED_BY      ACTION                        
---------- -------------------- ------------------------- ---------- ---------- --------- --------------- ------------------------------
       104 Bruce                Ernst                           6000        103 01-JUN-22 KPULLEN2        Deleted Employee Info         
       105 David                Austin                          4800        103 01-JUN-22 KPULLEN2        Deleted Employee Info         
       106 Valli                Pataballa                       4800        103 01-JUN-22 KPULLEN2        Deleted Employee Info         
       107 Diana                Lorentz                         4200        103 01-JUN-22 KPULLEN2        Deleted Employee Info         


Rollback complete.




REM Q3.)

DROP Table Dept_Log;

CREATE TABLE Dept_Log
(
    old_deptno      number(4),
    new_deptno      number(4),
    old_deptname    varchar2(30),
    new_deptname    varchar2(30),
    old_mgrid       number(6),
    new_mgrid       number(6),
    old_locid       number(4),
    new_locid       number(4),
    updated_date    DATE,
    updated_by      varchar2(15),
    action          varchar2(25)
)

CREATE OR REPLACE TRIGGER Dept_Change
    AFTER INSERT OR DELETE or UPDATE of manager_id, location_id on departments
    FOR EACH ROW
    BEGIN
        IF INSERTING THEN
            INSERT INTO Dept_Log
            VALUES (null, :new.department_id, null, :new.department_name, null, :new.manager_id, 0, :new.location_id, SYSDATE, USER, 'Inserted Row');
        
        ELSIF DELETING THEN
            INSERT INTO Dept_Log
            VALUES (:old.department_id, 0, :old.department_name, null, :old.manager_id, 0, :old.location_id, 0, SYSDATE, USER, 'DELETED Row');
                    
        ELSIF UPDATING ('manager_id') THEN
            INSERT INTO Dept_Log
            VALUES(:old.department_id, :new.department_id, :old.department_name, :new.department_name, 
                    :old.manager_id, :new.manager_id, :old.location_id, :new.location_id, SYSDATE, USER, 'Updated MGR_ID Row');
                    
        ELSIF UPDATING ('location_id') THEN
            INSERT INTO Dept_Log
            VALUES(:old.department_id, :new.department_id, :old.department_name, :new.department_name, 
                    :old.manager_id, :new.manager_id, :old.location_id, :new.location_id, SYSDATE, USER, 'Updated LOC_ID Row');
                    
        ELSE
            DBMS_OUTPUT.PUT_LINE (' We are NOT in business...');
        END IF;
        
        END Dept_Change;
        /
        
Column OLD_Deptname     format A10
Column NEW_Deptname     format A10

SELECT * From Dept_log;

INSERT INTO departments VALUES (290, 'Test', null, 1700);

UPDATE departments set manager_id = 103 WHERE department_id = 290;
UPDATE departments set location_id = 1800 WHERE department_id = 290;

DELETE departments where department_id = 290;

SELECT * from Dept_log;

ROLLBACK;




[output]

Table DEPT_LOG created.


Trigger DEPT_CHANGE compiled

no rows selected

1 row inserted.


1 row updated.


1 row updated.


1 row deleted.


OLD_DEPTNO NEW_DEPTNO OLD_DEPTNA NEW_DEPTNA  OLD_MGRID  NEW_MGRID  OLD_LOCID  NEW_LOCID UPDATED_D UPDATED_BY      ACTION                   
---------- ---------- ---------- ---------- ---------- ---------- ---------- ---------- --------- --------------- -------------------------
                  290            Test                                      0       1700 01-JUN-22 KPULLEN2        Inserted Row             
       290        290 Test       Test                         103       1700       1700 01-JUN-22 KPULLEN2        Updated MGR_ID Row       
       290        290 Test       Test              103        103       1700       1800 01-JUN-22 KPULLEN2        Updated LOC_ID Row       
       290          0 Test                         103          0       1800          0 01-JUN-22 KPULLEN2        DELETED Row              


Rollback complete.





REM Q4.)

CREATE OR REPLACE PACKAGE Pkg_Dept_Head AS

    FUNCTION Dept_Head_Fname
    ( 
        Deptno  number
    )
    RETURN varchar2 ;
    
    FUNCTION Dept_Head_Fname
    ( 
        Dept_name  varchar2
    )
    RETURN varchar2 ;
    
END Pkg_Dept_Head;


CREATE OR REPLACE PACKAGE BODY Pkg_Dept_Head AS
     
    FUNCTION Dept_Head_FName
    (
        Deptno IN number
    )
    RETURN varchar2
    IS 
    Dept_Head_fullname  varchar2(47);
    
    BEGIN
        SELECT first_name || ' ' || last_name INTO Dept_Head_fullname
        FROM employees
        WHERE employee_id = 
            (
                select manager_id 
                from departments
                where department_id = Deptno
            );
        RETURN Dept_Head_fullname;
    END Dept_Head_Fname;
    
    FUNCTION Dept_Head_Fname
    (
        Dept_name   IN  varchar2
    )
    RETURN varchar2
    IS
    Dept_Head_fullname  varchar2(47);
    
    BEGIN
        SELECT first_name || ' ' || last_name INTO Dept_Head_fullname
        FROM employees
        WHERE employee_id = 
            (
                select manager_id 
                from departments
                where upper (department_name) = upper(Dept_name)
            );
        RETURN Dept_Head_fullname;
    END Dept_Head_Fname;
   
END Pkg_Dept_Head;
/    


DECLARE
    dpt_id          employees.department_id%TYPE    := 60;
    dept_name       varchar2(30)  := 'it';
    dpt_head_fname  varchar2(47);

BEGIN
        Dpt_head_fname := Pkg_dept_head.Dept_Head_Fname(dpt_id);
        
        DBMS_OUTPUT.PUT_LINE ('For the department with ID ' || dpt_id || ':' ||
            CHR(10) || 'its department head name is : ' || Dpt_head_fname || '.');
            
        Dpt_head_fname := Pkg_dept_head.Dept_Head_FName(dept_name);
         DBMS_OUTPUT.PUT_LINE ('For the department with ID ' || dept_name || ':' ||
            CHR(10) || 'its department head name is : ' || Dpt_head_fname || '.');    

END;


[output]

For the department with ID 60:
its department head name is : Alexander Hunold.
For the department with ID it:
its department head name is : Alexander Hunold.


PL/SQL procedure successfully completed.




